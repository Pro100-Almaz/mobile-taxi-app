# Driver Generator Service Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Create necessary directories
RUN mkdir -p /app/data /app/cache

# Copy application code
COPY . .

# Copy only the driver generator service
RUN mkdir -p /app/generator && \
    cp -r app/services/driver_generator.py /app/generator/ && \
    cp -r app/core /app/generator/ && \
    cp app/main.py /app/generator/generator_main.py

# Create non-root user
RUN useradd --create-home --shell /bin/bash app \
    && chown -R app:app /app
USER app

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "
import asyncio
from app.services.driver_generator import DriverGeneratorService

async def check_health():
    service = DriverGeneratorService()
    await service.initialize_drivers()
    stats = service.get_stats()
    return stats['total_drivers'] > 0

asyncio.run(check_health())
" || exit 1

# Start the driver generator service
CMD ["python", "-c", "
import asyncio
from app.services.driver_generator import DriverGeneratorService

async def main():
    print('🚗 Starting Driver Generator Service...')
    service = DriverGeneratorService()
    await service.initialize_drivers()

    stats = service.get_stats()
    print(f'✅ Generated {stats[\"total_drivers\"]} drivers')
    print(f'📍 Location data loaded: {stats[\"location_data_loaded\"]}')

    # Keep the service running
    while True:
        await asyncio.sleep(60)
        stats = service.get_stats()
        print(f'📊 Drivers: {stats[\"online_drivers\"]}/{stats[\"total_drivers\"]} online')

if __name__ == '__main__':
    asyncio.run(main())
"]
